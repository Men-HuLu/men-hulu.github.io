(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{216:function(n,s,a){"use strict";a.r(s);var e=a(0),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"一、单例模式优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、单例模式优点"}},[n._v("#")]),n._v(" 一、单例模式优点")]),n._v(" "),a("p",[n._v("单例模式核心在于对于某个单例类，在系统中同时只存在唯一一个实例，并且该实例容易被外界所访问；\n意味着在内存中，只存在一个实例，减少了内存开销；")]),n._v(" "),a("h3",{attrs:{id:"二、单例模式特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、单例模式特点"}},[n._v("#")]),n._v(" 二、单例模式特点")]),n._v(" "),a("p",[n._v("只存在唯一一个实例；\n提供统一对外访问接口，使得全局可对该单例的唯一实例进行访问；\n自行实例化（私有构造函数，不允许外界对其进行实例化）。")]),n._v(" "),a("h3",{attrs:{id:"三、单例模式使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、单例模式使用"}},[n._v("#")]),n._v(" 三、单例模式使用")]),n._v(" "),a("p",[n._v("资源管理器，资源对象数据的加载和卸载（无状态不需要实例化的对象）；\n单一客户端连接服务器等；\n生命周期在游戏中永不消毁的对象。")]),n._v(" "),a("h3",{attrs:{id:"四、单例模式注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、单例模式注意点"}},[n._v("#")]),n._v(" 四、单例模式注意点")]),n._v(" "),a("p",[n._v("注意线程安全问题，在多线程、高并发的情况下，可能同时产生多个实例,违背了单例模式。\nUnity中如果过度使用单例模式，将会导致代码耦合度非常高，脚本与脚本之间的耦合，代码的后续拓展变得非常麻烦。一个过分依赖单例模式的开发者不能成为一个好的开发者，也不会去接触到更多优秀的设计模式。个人推荐ECS 实体 - 组件式编程。\nUnity中暂时不需要考虑多线程问题，Unity就只有一个主线程和开启多个辅助协程，不会出现多线程并发问题。\n控制游戏对象的生成和销毁并不建议使用单例模式，可通过主游戏逻辑InGame进行事件下发，自行管理Update，使用工厂来进行对象的创建和销毁。")]),n._v(" "),a("h4",{attrs:{id:"无线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无线程"}},[n._v("#")]),n._v(" 无线程")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("/// <summary>\n/// 单例模式的实现\n/// </summary>\npublic class Singleton\n{\n    // 定义一个静态变量来保存类的实例\n    private static Singleton uniqueInstance;\n    // 定义私有构造函数，使外界不能创建该类实例\n    private Singleton()\n    {\n    }\n    /// <summary>\n    /// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点\n    /// </summary>\n    /// <returns></returns>\n    public static Singleton GetInstance()\n    {\n        // 如果类的实例不存在则创建，否则直接返回\n        if (uniqueInstance == null)\n        {\n            uniqueInstance = new Singleton();\n        }\n        return uniqueInstance;\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])]),a("h4",{attrs:{id:"线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[n._v("#")]),n._v(" 线程")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/// <summary>\n/// 单例模式的实现\n/// </summary>\npublic class Singleton\n{\n    // 定义一个静态变量来保存类的实例\n    private static Singleton uniqueInstance;\n\n    // 定义一个标识确保线程同步\n    private static readonly object locker = new object();\n    // 定义私有构造函数，使外界不能创建该类实例\n    private Singleton()\n    {\n    }\n\n    /// <summary>\n    /// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点\n    /// </summary>\n    /// <returns></returns>\n    public static Singleton GetInstance()\n    {\n        // 当第一个线程运行到这里时，此时会对locker对象 "加锁"，\n        // 当第二个线程运行该方法时，首先检测到locker对象为"加锁"状态，该线程就会挂起等待第一个线程解锁\n        // lock语句运行完之后（即线程运行完之后）会对该对象"解锁"\n        lock (locker)\n        {\n            // 如果类的实例不存在则创建，否则直接返回\n            if (uniqueInstance == null)\n            {\n                uniqueInstance = new Singleton();\n            }\n        }\n        return uniqueInstance;\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br")])]),a("h4",{attrs:{id:"双锁减少性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双锁减少性能"}},[n._v("#")]),n._v(" 双锁减少性能")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/// <summary>\n/// 单例模式的实现\n/// </summary>\npublic class Singleton\n{\n    // 定义一个静态变量来保存类的实例\n    private static Singleton uniqueInstance;\n\n    // 定义一个标识确保线程同步\n    private static readonly object locker = new object();\n    // 定义私有构造函数，使外界不能创建该类实例\n    private Singleton()\n    {\n    }\n\n    /// <summary>\n    /// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点\n    /// </summary>\n    /// <returns></returns>\n    public static Singleton GetInstance()\n    {\n        // 当第一个线程运行到这里时，此时会对locker对象 "加锁"，\n        // 当第二个线程运行该方法时，首先检测到locker对象为"加锁"状态，该线程就会挂起等待第一个线程解锁\n        // lock语句运行完之后（即线程运行完之后）会对该对象"解锁"\n        // 双重锁定只需要一句判断就可以了\n        if (uniqueInstance == null)\n        {\n            lock (locker)\n            {\n                // 如果类的实例不存在则创建，否则直接返回\n                if (uniqueInstance == null)\n                {\n                    uniqueInstance = new Singleton();\n                }\n            }\n        }\n        return uniqueInstance;\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br")])]),a("h4",{attrs:{id:"c-中实现了单例模式的类（-net-framework）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中实现了单例模式的类（-net-framework）"}},[n._v("#")]),n._v(" C#中实现了单例模式的类（.NET FrameWork）")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 该类不是一个公开类\n// 但是该类的实现应用了单例模式\ninternal sealed class SR\n{\n    private static SR loader;\n    internal SR()\n    {\n    }\n    // 主要是因为该类不是公有，所以这个全部访问点也定义为私有的了\n    // 但是思想还是用到了单例模式的思想的\n    private static SR GetLoader()\n    {\n        if (loader == null)\n        {\n            SR sr = new SR();\n            Interlocked.CompareExchange<SR>(ref loader, sr, null);\n        }\n        return loader;\n    }\n\n    // 这个公有方法中调用了GetLoader方法的\n    public static object GetObject(string name)\n    {\n        SR loader = GetLoader();\n        if (loader == null)\n        {\n            return null;\n        }\n        return loader.resources.GetObject(name, Culture);\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);