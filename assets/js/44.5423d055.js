(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{225:function(s,a,n){"use strict";n.r(a);var t=n(0),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_1-类的构造"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-类的构造"}},[s._v("#")]),s._v(" 1.类的构造")]),s._v(" "),n("h4",{attrs:{id:"类的成员："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的成员："}},[s._v("#")]),s._v(" 类的成员：")]),s._v(" "),n("h5",{attrs:{id:"_1-字段：公共字段-temp-ps-方法私有字段temp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-字段：公共字段-temp-ps-方法私有字段temp"}},[s._v("#")]),s._v(" 1.字段：公共字段_temp  ps:方法私有字段temp")]),s._v(" "),n("h5",{attrs:{id:"_2-属性：temp-对字段-temp的封装-对类外"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-属性：temp-对字段-temp的封装-对类外"}},[s._v("#")]),s._v(" 2.属性：Temp 对字段_temp的封装  对类外")]),s._v(" "),n("h5",{attrs:{id:"_3-索引：-似于属性，只能作用在实例对象上"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-索引：-似于属性，只能作用在实例对象上"}},[s._v("#")]),s._v(" 3.索引： 似于属性，只能作用在实例对象上")]),s._v(" "),n("h5",{attrs:{id:"_4-方法："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法："}},[s._v("#")]),s._v(" 4.方法：")]),s._v(" "),n("h5",{attrs:{id:"_5-构造函数："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-构造函数："}},[s._v("#")]),s._v(" 5.构造函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('例子\nclass SampleCollection<T>\n{\n    //字段\n    public string _temp;\n    //属性\n    public string Temp{get;set;};\n    //索引\n   private T[] arr = new T[100];\n   public T this[int i]\n   {\n      get { return arr[i]; }\n      set { arr[i] = value; }\n   }\n   //方法\n    public void SetTemp(string temp)\n    {\n        _temp = temp;\n    }\n   //构造函数\n    SampleCollection()\n    {\n        _temp = "temp";\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("hr"),s._v(" "),n("h4",{attrs:{id:"静态类：（abstract-seal）抽象密封类（不能实例和继承）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态类：（abstract-seal）抽象密封类（不能实例和继承）"}},[s._v("#")]),s._v(" 静态类：（abstract seal）抽象密封类（不能实例和继承）")]),s._v(" "),n("ol",[n("li",[s._v("所有成员都是静态成员，不是所有静态成员都在静态类中")]),s._v(" "),n("li",[s._v("面对类，而不是对象")]),s._v(" "),n("li",[s._v("静态成员直接通过类名+属性名访问")]),s._v(" "),n("li",[s._v("一个静态成员改变了，其他访问到的也修改了\n如所有实例公用的一个数值")])]),s._v(" "),n("h5",{attrs:{id:"静态构造函数："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态构造函数："}},[s._v("#")]),s._v(" 静态构造函数：")]),s._v(" "),n("ol",[n("li",[s._v("只要有静态成员编译器就给静态构造函数")]),s._v(" "),n("li",[s._v("没有修饰词（默认private），无参构造函数")]),s._v(" "),n("li",[s._v("不能手动调用，是在第一次使用时调用")])]),s._v(" "),n("h5",{attrs:{id:"单利模式："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单利模式："}},[s._v("#")]),s._v(" 单利模式：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public class Singleton\n{\n        private static Singleton instance;\n        private Singleton()\n        {\n        }\n        public static Singleton GetInstance()\n        {\n                if(instance==null)\n                {\n                        instance=new Singleton();\n                }\n                return instance;\n        }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("hr"),s._v(" "),n("h5",{attrs:{id:"类的构造函数："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的构造函数："}},[s._v("#")]),s._v(" 类的构造函数：")]),s._v(" "),n("ul",[n("li",[s._v("挡一个子类继承父类以后，该子类中的所有构造函数都会先调用一次父类的构造函数")]),s._v(" "),n("li",[s._v("在没有特殊指定构造函数的时候，会调用默认的无参构造函数")]),s._v(" "),n("li",[s._v("自己加构造函数后，默认无参构造函数会没有")]),s._v(" "),n("li",[s._v("修饰public，private（一般不用）")]),s._v(" "),n("li",[s._v("构造函数不能被继承，故子类在后面加base调用父类构造函数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public  student（string name， int age）：base（name）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("类在后面加this调用自己构造函数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public  student（string name， int age，string sex， int id=0）\npublic  student（string name， int age）：this（name，age，“男”，0）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h4",{attrs:{id:"修饰符："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰符："}},[s._v("#")]),s._v(" 修饰符：")]),s._v(" "),n("h5",{attrs:{id:"类的成员访问修饰符："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的成员访问修饰符："}},[s._v("#")]),s._v(" 类的成员访问修饰符：")]),s._v(" "),n("ul",[n("li",[s._v("pubilc //公共")]),s._v(" "),n("li",[s._v("protected internal //子类或程序集内")]),s._v(" "),n("li",[s._v("internal //程序集内")]),s._v(" "),n("li",[s._v("protected //类和子类")]),s._v(" "),n("li",[s._v("private //类内 （不写为private ）")])]),s._v(" "),n("h5",{attrs:{id:"类修饰符："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类修饰符："}},[s._v("#")]),s._v(" 类修饰符：")]),s._v(" "),n("ol",[n("li",[s._v("pubilc")]),s._v(" "),n("li",[s._v("internal")])]),s._v(" "),n("h5",{attrs:{id:"注意-访问级别约束："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意-访问级别约束："}},[s._v("#")]),s._v(" ==注意==访问级别约束：")]),s._v(" "),n("p",[s._v("1.子类不能比父类高\n2.类中属性和字段不能比类高\n3.方法的访问不能比参数和返回值高")]),s._v(" "),n("h4",{attrs:{id:"new"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[s._v("#")]),s._v(" new")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1）new 运算符：用于创建对象和调用构造函数。这种大家都比较熟悉，没什么好说的了。\n2）new 修饰符：在用作修饰符时，new 关键字可以显式隐藏从基类继承的成员。\n3）new 约束：用于在泛型声明中约束可能用作类型参数的参数的类型。 \n  DerivedB b = new DerivedB();\n  b.Invoke();//调用DerivedB的Invoke方法，输出：2\n  Console.WriteLine(b.x.ToString());//输出DerivedB的成员x值：2\n  BaseA a = b;\n  a.Invoke();//调用BaseA的Invoke方法，输出：1\n  a.TrueValue = 3;//调用BaseA的属性TrueValue，修改BaseA的成员x的值\n  Console.WriteLine(a.x.ToString());//输出BaseA的成员x的值：3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h4",{attrs:{id:"局部类型-partial"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#局部类型-partial"}},[s._v("#")]),s._v(" 局部类型 partial")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public partial class Form1 : Form\n{\n    public Form1()\n     {\n         InitializeComponent();\n     }\n}\n局部类型适用于以下情况：\n(1) 类型特别大，不宜放在一个文件中实现。\n(2) 一个类型中的一部分代码为自动化工具生成的代码，不宜与我们自己编写的代码混合在一起。\n(3) 需要多人合作编写一个类。局部类型的限制\n(1) 局部类型只适用于类、接口、结构，不支持委托和枚举。\n(2) 同一个类型的各个部分必须都有修饰符 partial。\n(3) 使用局部类型时，一个类型的各个部分必须位于相同的命名空间中。\n(4) 一个类型的各个部分必须被同时编译。\n\n1. 局部类型的注意点\n\n(1) 关键字partial是一个上下文关键字，只有和 class、struct、interface 放在一起时才有关键字的含义。因此partial的引入不会影响现有代码中名称为partial的变量。\n(2) 局部类型的各个部分一般是分开放在几个不同的.cs文件中，但C#编译器允许我们将他们放在同一文件中。\n\n2. 局部类型的应用特性\n在局部类型上的特性具有“累加”效应。\n[Attribute1, Attribute2("Hello")]\npartial class Class1{}\n\n[Attribute3, Attribute2("Exit")]\npartial class Class1{}\n\n相当于\n[Attribute1, Attribute2("Hello"), Attribute3, Attribute2("Exit")]\nclass Class1 {}\n\n注：Attribute2属性允许在类上多次使用。\n\n3. 局部类型上的修饰符\n\n(1) 一个类型的各个部分上的访问修饰符必须维持一致性。\n(2) 如果一个类型有一个部分使用了abstract修饰符，那么整个类都将被视为抽象类。\n(3) 如果一个类型有一个部分使用了 sealed 修饰符，那么整个类都将被视为密封类。\n(4) 一个类的各个部分不能使用相互矛盾的修饰符，比如不能在一个部分上使用abstract，又在另一个部分上使用sealed。\n\n4. 局部类型的基类和接口\n(1) 一个类型的各个部分上指定的基类必须一致。某个部分可以不指定基类，但如果指定，则必须相同。\n(2) 局部类型上的接口具有“累加”效应。\npartial class Class2: Iinterface1, Iinterface2 {}\npartial class Class2: Iinterface3 {}\npartial class Class2: Iinterface2 {}\n相当于\nclass Class2: Iinterface1, Iinterface2, Iinterface3 {}\n时间会记录下一切。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br")])]),n("h2",{attrs:{id:"_2-类的特性-类的封装，继承，多态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-类的特性-类的封装，继承，多态"}},[s._v("#")]),s._v(" 2.类的特性--类的封装，继承，多态")]),s._v(" "),n("h4",{attrs:{id:"类的封装："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的封装："}},[s._v("#")]),s._v(" 类的封装：")]),s._v(" "),n("ol",[n("li",[s._v("属性封装字段")]),s._v(" "),n("li",[s._v("方法的多个参数封装成一个对象")]),s._v(" "),n("li",[s._v("讲一堆代码封装到一个方法中")]),s._v(" "),n("li",[s._v("将一些功能封装到几个类中")]),s._v(" "),n("li",[s._v("一些功能相同的代码封装到一个程序集中")])]),s._v(" "),n("h4",{attrs:{id:"类的继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的继承"}},[s._v("#")]),s._v(" 类的继承")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("特性：1.继承单根性，只能有一个父类2.传递性\n好处：1.代码重用，类的多态\n里氏替换原则：\nbase class基类  derived class 派生类\nparent class 父类 child class 子类\nparent  **=new parent ()    \nparent  **=new child ()\nchild ***=（child ）**\n或者 child ***= **  as child（不会报错 ，null）\nif(** is child )判断是不是child的父类\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h4",{attrs:{id:"类的多态："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的多态："}},[s._v("#")]),s._v(" 类的多态：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("父类方法：public virtual void say（）{}\n子类方法：\n1.public override void say（）{}\n2.public new virtual  void say（）{}  //表示添加一个全新的方法\nparent 实例名=new child（）\n实例名.say()\n1.调用子类方法，2调用父类方法\nchild 实例名=new child（）\n实例名.say()\n1.调用子类方法，2调用子类方法\nvar 实例名=new child（）\n实例名.say()\n1.调用子类方法，2调用子类方法\n1.根据后面类型决定，2.根据前面类型决定\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h4",{attrs:{id:"重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[s._v("#")]),s._v(" 重载")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1、参数类型、个数、顺序至少有一个不相同。 \n2、不能重载只有返回值不同的方法名。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"_3-异常处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-异常处理"}},[s._v("#")]),s._v(" 3.异常处理")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("异常\ntry{}\ncatch（）\n{}\nfinaly{}\n\n抛出异常\nSystem. ArgumentException 参数无效时的异常\nSystem. FileNotFoundException 访问磁盘上不存在的文件时引用的异常\nSystem. IndexOutOfRangeException试图访问索引超出数组界限的数组元素时引发的异常\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);