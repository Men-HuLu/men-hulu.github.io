(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{226:function(s,n,a){"use strict";a.r(n);var e=a(0),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"线程简例-thread-："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程简例-thread-："}},[s._v("#")]),s._v(" 线程简例(Thread)：")]),s._v(" "),a("h5",{attrs:{id:"demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[s._v("#")]),s._v(" Demo")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" Thread thread = new Thread(delegate() {\nwhile (true)\n {\n    Console.WriteLine(DateTime.Now);\n    Thread.Sleep(1000);\n }\n });\nthread.IsBackground = true;//默认前台，线程默认前台线程，一个进程的标志是所有前台线程的退出\nthread.Start();//线程启动\nthread.Suspend();//挂起线程\nthread.Resume();//挂起线程重启\nthread.Abort();//不得已，直接结束，会抛异常\nthread.Join(1000);//主线程等待thread子线程执行完成；超时时间1000毫米，超过自动继续执行\nthread.Priority = ThreadPriority.Highest;//线程优先级（建议，由操作系统说了算）\nConsole.WriteLine(thread.ManagedThreadId);//当前子线程id\nConsole.WriteLine(Thread.CurrentThread.ManagedThreadId);//当前主线程id\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h5",{attrs:{id:"子线程访问主线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子线程访问主线程"}},[s._v("#")]),s._v(" 子线程访问主线程")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//错误\nprotected override void OnLoad(EventArgs e)\n{\nbase.OnLoad(e);\nControl.CheckForIllegalCrossThreadCalls = false；//只能用于演示阶段，阻止报错\n}\n\nprivate void Button1_Click(object sender, EventArgs e)\n{\n    Thread thread = new Thread(() =>\n    {\n        textBox1.Text = "dsfds";\n    });\nthread.Start();\n}\n\n\n//正确(子线程访问主线程空间只能使用委托)\n报异常处理\nprotected override void OnLoad(EventArgs e)\n{\n    base.OnLoad(e);\n}\n\nprivate void Button1_Click(object sender, EventArgs e)\n{\n    Thread thread = new Thread(() =>\n    {\n        if (textBox1.InvokeRequired)//判断控件是否在该线程上\n        {\n            //找到创建该控件的线程，执行委托\n            textBox1.Invoke(new Action<string>(s=> { this.textBox1.Text = s; }),"123");\n        }\n        else\n        {\n            textBox1.Text = DateTime.Now.ToString();\n        }\n    });\nthread.Start();\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])]),a("h5",{attrs:{id:"线程池-threadpool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池-threadpool"}},[s._v("#")]),s._v(" 线程池(ThreadPool)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('ThreadPool.QueueUserWorkItem(s=> { Console.WriteLine(s),"sss"});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"异步线程-iasyncresult"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步线程-iasyncresult"}},[s._v("#")]),s._v(" 异步线程(IAsyncResult)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('内部原理：使一个线程池的线程执行了委托的方法\nConsole.WriteLine(Thread.CurrentThread.ManagedThreadId);\n Func<int, int, string> delfunc = (a, b) =>\n{\nConsole.WriteLine(Thread.CurrentThread.ManagedThreadId);\nreturn (a + b).ToString();\n };\n//拿到结果\n IAsyncResult result=delfunc.BeginInvoke(3, 4, null, null);\n if (result.IsCompleted)\n {\n  }\n//EndInvoke方法会阻塞线程，直到异步委托指向完成之后，才能继续往下执行\nstring s=delfunc.EndInvoke(result);\n\n有回调函数的异步委托\n static void Main()\n{\n Console.WriteLine(Thread.CurrentThread.ManagedThreadId);\n        Func<int, int, string> delfunc = (a, b) =>\n       {\n            Console.WriteLine(Thread.CurrentThread.ManagedThreadId);\n            return (a + b).ToString();\n       };           \n//入参可以是委托\n       IAsyncResult result=delfunc.BeginInvoke(3, 4, MyAsyncCallBack, delfunc);\n       Console.ReadKey();\n}\n //是异步委托执行完之后，在回来执行的函数\nstatic void MyAsyncCallBack(IAsyncResult ar)\n{\n     //拿到异步委托的结果\n     AsyncResult result = (AsyncResult)ar;\n     var del = (Func<int, int, string>)result.AsyncDelegate;\n      string returnvalue = del.EndInvoke(result);\n     Console.WriteLine(returnvalue);\n     //入参\n      Console.WriteLine($"{result.AsyncState}");\n     var  del=  (Func<int, int, string>)result.AsyncState;\n      Console.WriteLine($"{Thread.CurrentThread.ManagedThreadId}");\n }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("h5",{attrs:{id:"信号量-semaphore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量-semaphore"}},[s._v("#")]),s._v(" 信号量(Semaphore)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('static SemaphoreSlim semLim = new SemaphoreSlim(3); //3表示最多只能有三个线程同时访问\nstatic void Main(string[] args)\n{\n    for (int i = 0; i < 10; i++)\n    {\n        new Thread(SemaphoreTest).Start();\n    }\n    Console.Read();\n}\nstatic void SemaphoreTest()\n{\n    semLim.Wait();\n    Console.WriteLine("线程" + Thread.CurrentThread.ManagedThreadId.ToString() + "开始执行");\n    Thread.Sleep(2000);\n    Console.WriteLine("线程" + Thread.CurrentThread.ManagedThreadId.ToString() + "执行完毕");\n    semLim.Release();\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h5",{attrs:{id:"异步task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步task"}},[s._v("#")]),s._v(" 异步Task")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Console.WriteLine("主线程启动");\n//Task.Run启动一个线程\n//Task启动的是后台线程，要在主线程中等待后台线程执行完毕，可以调用Wait方法\n//Task task = Task.Factory.StartNew(() => { Thread.Sleep(1500); Console.WriteLine("task启动"); });\nTask task = Task.Run(() => { \n    Thread.Sleep(1500);\n    Console.WriteLine("task启动");\n});\nThread.Sleep(300);\ntask.Wait();\nConsole.WriteLine("主线程结束");\n开启新任务的方法：Task.Run()或者Task.Factory.StartNew()，开启的是后台线程\n要在主线程中等待后台线程执行完毕，可以使用Wait方法(会以同步的方式来执行)。不用Wait则会以异步的方式来执行。\nstatic void Main(string[] args)\n{\n    for (int i = 0; i < 5; i++)\n    {\n        new Thread(Run1).Start();\n    }\n    for (int i = 0; i < 5; i++)\n    {\n        Task.Run(() => { Run2(); });\n    }\n}\nstatic void Run1()\n{\n    Console.WriteLine("Thread Id =" + Thread.CurrentThread.ManagedThreadId);\n}\nstatic void Run2()\n{\n    Console.WriteLine("Task调用的Thread Id =" + Thread.CurrentThread.ManagedThreadId);\n}\n Task<TResult>\nConsole.WriteLine("主线程开始");\n//返回值类型为string\nTask<string> task = Task<string>.Run(() => {\n    Thread.Sleep(2000); \n    return Thread.CurrentThread.ManagedThreadId.ToString(); \n});\n//会等到task执行完毕才会输出;\nConsole.WriteLine(task.Result);\nConsole.WriteLine("主线程结束");\nasync/await\nstatic void Main(string[] args)\n{\n    Console.WriteLine("-------主线程启动-------");\n    Task<int> task = GetStrLengthAsync();\n    Console.WriteLine("主线程继续执行");\n    Console.WriteLine("Task返回的值" + task.Result);\n    Console.WriteLine("-------主线程结束-------");\n}\n\nstatic async Task<int> GetStrLengthAsync()\n{\n    Console.WriteLine("GetStrLengthAsync方法开始执行");\n    //此处返回的<string>中的字符串类型，而不是Task<string>\n    string str = await GetString();\n    Console.WriteLine("GetStrLengthAsync方法执行结束");\n    return str.Length;\n}\n\nstatic Task<string> GetString()\n{\n　　 //Console.WriteLine("GetString方法开始执行")\n    return Task<string>.Run(() =>\n    {\n        Thread.Sleep(2000);\n        return "GetString的返回值";\n    });\n}\nasync用来修饰方法，表明这个方法是异步的，声明的方法的返回类型必须为：void，Task或Task<TResult>。\nawait必须用来修饰Task或Task<TResult>，而且只能出现在已经用async关键字修饰的异步方法中。通常情况下，async/await成对出现才有意义，\n\n那么await的作用是什么呢？\n可以从字面上理解，上面提到task.wait可以让主线程等待后台线程执行完毕，await和wait类似，同样是等待，等待Task<string>.Run()开始的后台线程执行完毕，不同的是await不会阻塞主线程，只会让GetStrLengthAsync方法暂停执行\n挂起：一般是主动的，由系统或程序发出，甚至于辅存中去。（不释放CPU，可能释放内存，放在外存）\n阻塞：一般是被动的，在抢占资源中得不到资源，被动的挂起在内存，等待某种资源或信号量（即有了资源）将他唤醒。（释放CPU，不释放内存）\n\nParallel\nStopwatch watch1 = new Stopwatch();\nwatch1.Start();\nfor (int i = 1; i <= 10; i++)\n{\n    Console.Write(i + ",");\n    Thread.Sleep(1000);\n}\nwatch1.Stop();\nConsole.WriteLine(watch1.Elapsed);\n\nStopwatch watch2 = new Stopwatch();\nwatch2.Start();\n\n//会调用线程池中的线程\nParallel.For(1, 11, i =>\n{\n    Console.WriteLine(i + ",线程ID:" + Thread.CurrentThread.ManagedThreadId);\n    Thread.Sleep(1000);\n});\nwatch2.Stop();\nConsole.WriteLine(watch2.Elapsed);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br")])]),a("h2",{attrs:{id:"进程概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程概念"}},[s._v("#")]),s._v(" 进程概念")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('进程就是一个软件\nProcess p;//实例化一个Process对象\np = Process.Start(@"E:\\1.txt");//要开启的进程（或 要启用的程序），括号内为绝对路径\np.Kill();//结束进程\n\n直接用Thread会开启5个线程，用Task(用了线程池)开启了3个！\n补充c#\nlock（）//后面加一个引用类型的实例\n{\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);